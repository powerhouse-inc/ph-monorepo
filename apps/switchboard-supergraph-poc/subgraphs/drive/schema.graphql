input InputOperationSignerUser {
  address: String!
  networkId: String!
  chainId: Int!
}

input InputOperationSignerApp {
  name: String!
  key: String!
}

input InputOperationSigner {
  app: InputOperationSignerApp
  user: InputOperationSignerUser
}

input InputOperationContext {
    signer: InputOperationSigner
}

input InputOperationUpdate {
  index: Int!
  skip: Int
  type: String!
  id: String!
  input: String!
  hash: String!
  timestamp: String!
  error: String
  context: InputOperationContext
}

input InputStrandUpdate {
  driveId: String!
  documentId: String!
  scope: String!
  branch: String!
  operations: [InputOperationUpdate!]!
}

input ListenerFilterInput {
  documentType: [String!]
  documentId: [String!]
  scope: [String!]
  branch: [String!]
}

enum UpdateStatus {
  SUCCESS
  MISSING
  CONFLICT
  ERROR
}

input ListenerRevisionInput {
  driveId: String!
  documentId: String!
  scope: String!
  branch: String!
  status: UpdateStatus!
  revision: Int!
}

type ListenerRevision {
    driveId: String!
    documentId: String!
    scope: String!
    branch: String!
    status: UpdateStatus!
    revision: Int!
    error: String
}

type Mutation {
    registerPullResponder(name: String!, url: String!): Listener
    pushUpdates(strands: [InputStrandUpdate!]!): [ListenerRevision!]!
    acknowledge(listenerId: ID!, revisions: [ListenerRevisionInput!]!): Boolean
}

type System {
    sync: Sync
}

type Sync {
    strands(since: String): [UpdateStatus!]!
}

type Query {
    system: System
    drive: DocumentDriveState
    document(id: ID!): IDocument
    documents: [String!]!
}
